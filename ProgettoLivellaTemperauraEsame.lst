C51 COMPILER V9.51   PROGETTOLIVELLATEMPERAURAESAME                                        05/21/2014 12:03:58 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE PROGETTOLIVELLATEMPERAURAESAME
OBJECT MODULE PLACED IN .\ProgettoLivellaTemperauraEsame.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Sistemi Embended\ProgettoLivellaTemperauraEsame.c BROWSE DEBUG OBJECTEXT
                    -END PRINT(.\ProgettoLivellaTemperauraEsame.lst) TABS(2) OBJECT(.\ProgettoLivellaTemperauraEsame.obj)

line level    source

   1          /*
   2          ------------------Dubbi Amletici----------------
   3          Cosa serve op_code?
   4          
   5          
   6          */
   7          
   8          
   9          #include <c8051f020.h>
  10          #define WRITE 0x00;           
  11          #define READ 0x01;  
  12          #define LCD_address 0111110;
  13          #define BUS_error 0x00;
  14          #define BUS_start 0x08;
  15          #define BUS_rp_start 0x10; //repeat start
  16          #define ADD_ack 0x18;
  17          #define ADD_nack 0x20;
  18          #define DATA_ack 0x28;
  19          #define DATA_nack 0x30; //sull'esempio MTDBNACK
  20          #define ARB_lost 0x38; //arbitration lost
  21          
  22          
  23          void Init_Device();
  24          void LCD_Write();
  25          void LCD_Busy();
  26          void SM_send(char, char);
  27          
  28          void main (void) {  
  29   1        EA = 0; // disable all interrupts
  30   1        WDTCN = 0xDE; // disable watchdog 
  31   1        WDTCN = 0xAD; // disable watchdog  
  32   1        EIE1 |= 2; // enable interrupt bus, ma non abbiamo idea del perché si "|=2" 
  33   1        EA = 1; // enable interrupts 
  34   1        
  35   1        Init_Device();
  36   1        
  37   1        while (1){ // the main loop goes here  
  38   2          SM_send(LCD_address, 0x12);
*** ERROR C141 IN LINE 38 OF ..\Sistemi Embended\ProgettoLivellaTemperauraEsame.c: syntax error near ';'
  39   2        }
  40   1      }
  41          
  42          // Initialization function for device,
  43          // Call Init_Device() from your main program
  44          void Init_Device(void)
  45          {
  46   1          
  47   1          SMBus_Init();
  48   1          Port_IO_Init();
  49   1          LCD_Init();
  50   1          
  51   1      }
  52          
  53          void Port_IO_Init() //abilitazione crossbar
C51 COMPILER V9.51   PROGETTOLIVELLATEMPERAURAESAME                                        05/21/2014 12:03:58 PAGE 2   

  54          {
  55   1          XBR0      = 0x01; 
  56   1          XBR2      = 0x40;
  57   1      }
  58          
  59            void SMBus_Init()
  60          {
  61   1          SMB0CN    = 0x44; 
  62   1      }
  63          void LCD_Init(){
  64   1        SMB0CN=0x0;
  65   1        SMB0DAT=0x38;
  66   1        LCD_Write();
  67   1        SMB0CN=0x0;
  68   1        SMB0DAT=0x38;
  69   1        LCD_Write();
  70   1        
  71   1        SMB0DAT=0x14;
  72   1        LCD_Write();
  73   1        SMB0DAT=0x74;
  74   1        LCD_Write();
  75   1        SMB0DAT=0x54;
  76   1        LCD_Write();
  77   1        SMB0DAT=0x6F;
  78   1        LCD_Write();
  79   1        SMB0DAT=0x0C;
  80   1        LCD_Write();
  81   1        SMB0DAT=0x01;
  82   1        LCD_Write();
  83   1        
  84   1      }
  85          
  86          /*void LCD_Write(){
  87            LCD_Busy();
  88            STA=1;
  89            
  90          }*/
  91          void LCD_Busy(){
  92   1        while(BUSY){
  93   2          // attende che non sia busy
  94   2        }   
  95   1      }
  96          
  97          
  98          
  99          void SM_send(char chip_address, char out_data){
 100   1        LCD_Busy(); //poi dopo vediamo se farlo a mano.
 101   1        SMB0CN = 0x44; //abilito il bus 
 102   1        Command = (chip_address | WRITE);
 103   1        Word = out_data;
 104   1        
 105   1        STO=0; 
 106   1        STA=1; //start transfer
 107   1      }
 108          
 109          void SMBUS_ISR (void) interrupt 7 { //interrupt service routine
 110   1        switch (SMB0STA){ //SMB0STA stato del bus
 111   2          case BUS_start:
 112   2            SMB0DAT = (Command & 0xFE); //carica lindirizzo (cmq ci pensiamo dopo)
 113   2            STA=0;
 114   2            SI=0 //clear interrupt flag
 115   2            break;
C51 COMPILER V9.51   PROGETTOLIVELLATEMPERAURAESAME                                        05/21/2014 12:03:58 PAGE 3   

 116   2          
 117   2          case BUS_rp_start:
 118   2            SMB0DAT = Command;
 119   2            STA=0;
 120   2            SI=0;
 121   2            break;
 122   2          
 123   2          case ADD_ack:
 124   2            SMB0DAT = OP_code;
 125   2            SI=0;
 126   2            break;
 127   2          
 128   2          case ADD_nack:
 129   2            STO=1;
 130   2            STA=1;
 131   2            SI=0;
 132   2            break;
 133   2          
 134   2          
 135   2            
 136   2        }
 137   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
